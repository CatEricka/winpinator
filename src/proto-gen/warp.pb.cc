// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: warp.proto

#include "warp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr RemoteMachineInfo::RemoteMachineInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RemoteMachineInfoDefaultTypeInternal {
  constexpr RemoteMachineInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoteMachineInfoDefaultTypeInternal() {}
  union {
    RemoteMachineInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoteMachineInfoDefaultTypeInternal _RemoteMachineInfo_default_instance_;
constexpr RemoteMachineAvatar::RemoteMachineAvatar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : avatar_chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RemoteMachineAvatarDefaultTypeInternal {
  constexpr RemoteMachineAvatarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoteMachineAvatarDefaultTypeInternal() {}
  union {
    RemoteMachineAvatar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoteMachineAvatarDefaultTypeInternal _RemoteMachineAvatar_default_instance_;
constexpr LookupName::LookupName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , readable_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LookupNameDefaultTypeInternal {
  constexpr LookupNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LookupNameDefaultTypeInternal() {}
  union {
    LookupName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LookupNameDefaultTypeInternal _LookupName_default_instance_;
constexpr HaveDuplex::HaveDuplex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(false){}
struct HaveDuplexDefaultTypeInternal {
  constexpr HaveDuplexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HaveDuplexDefaultTypeInternal() {}
  union {
    HaveDuplex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HaveDuplexDefaultTypeInternal _HaveDuplex_default_instance_;
constexpr VoidType::VoidType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dummy_(0){}
struct VoidTypeDefaultTypeInternal {
  constexpr VoidTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoidTypeDefaultTypeInternal() {}
  union {
    VoidType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoidTypeDefaultTypeInternal _VoidType_default_instance_;
constexpr OpInfo::OpInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ident_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , readable_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(PROTOBUF_ULONGLONG(0))
  , use_compression_(false){}
struct OpInfoDefaultTypeInternal {
  constexpr OpInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpInfoDefaultTypeInternal() {}
  union {
    OpInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpInfoDefaultTypeInternal _OpInfo_default_instance_;
constexpr StopInfo::StopInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr)
  , error_(false){}
struct StopInfoDefaultTypeInternal {
  constexpr StopInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopInfoDefaultTypeInternal() {}
  union {
    StopInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopInfoDefaultTypeInternal _StopInfo_default_instance_;
constexpr TransferOpRequest::TransferOpRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_dir_basenames_()
  , sender_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_if_single_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mime_if_single_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(nullptr)
  , size_(PROTOBUF_ULONGLONG(0))
  , count_(PROTOBUF_ULONGLONG(0)){}
struct TransferOpRequestDefaultTypeInternal {
  constexpr TransferOpRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferOpRequestDefaultTypeInternal() {}
  union {
    TransferOpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferOpRequestDefaultTypeInternal _TransferOpRequest_default_instance_;
constexpr FileChunk::FileChunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relative_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symlink_target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_type_(0)
  , file_mode_(0u){}
struct FileChunkDefaultTypeInternal {
  constexpr FileChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileChunkDefaultTypeInternal() {}
  union {
    FileChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileChunkDefaultTypeInternal _FileChunk_default_instance_;
constexpr RegRequest::RegRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RegRequestDefaultTypeInternal {
  constexpr RegRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegRequestDefaultTypeInternal() {}
  union {
    RegRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegRequestDefaultTypeInternal _RegRequest_default_instance_;
constexpr RegResponse::RegResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locked_cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RegResponseDefaultTypeInternal {
  constexpr RegResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegResponseDefaultTypeInternal() {}
  union {
    RegResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegResponseDefaultTypeInternal _RegResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_warp_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_warp_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_warp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_warp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteMachineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoteMachineInfo, display_name_),
  PROTOBUF_FIELD_OFFSET(::RemoteMachineInfo, user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteMachineAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoteMachineAvatar, avatar_chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LookupName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LookupName, id_),
  PROTOBUF_FIELD_OFFSET(::LookupName, readable_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HaveDuplex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HaveDuplex, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VoidType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VoidType, dummy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OpInfo, ident_),
  PROTOBUF_FIELD_OFFSET(::OpInfo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::OpInfo, readable_name_),
  PROTOBUF_FIELD_OFFSET(::OpInfo, use_compression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StopInfo, info_),
  PROTOBUF_FIELD_OFFSET(::StopInfo, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransferOpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransferOpRequest, info_),
  PROTOBUF_FIELD_OFFSET(::TransferOpRequest, sender_name_),
  PROTOBUF_FIELD_OFFSET(::TransferOpRequest, receiver_name_),
  PROTOBUF_FIELD_OFFSET(::TransferOpRequest, receiver_),
  PROTOBUF_FIELD_OFFSET(::TransferOpRequest, size_),
  PROTOBUF_FIELD_OFFSET(::TransferOpRequest, count_),
  PROTOBUF_FIELD_OFFSET(::TransferOpRequest, name_if_single_),
  PROTOBUF_FIELD_OFFSET(::TransferOpRequest, mime_if_single_),
  PROTOBUF_FIELD_OFFSET(::TransferOpRequest, top_dir_basenames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileChunk, relative_path_),
  PROTOBUF_FIELD_OFFSET(::FileChunk, file_type_),
  PROTOBUF_FIELD_OFFSET(::FileChunk, symlink_target_),
  PROTOBUF_FIELD_OFFSET(::FileChunk, chunk_),
  PROTOBUF_FIELD_OFFSET(::FileChunk, file_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::RegRequest, hostname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegResponse, locked_cert_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RemoteMachineInfo)},
  { 7, -1, sizeof(::RemoteMachineAvatar)},
  { 13, -1, sizeof(::LookupName)},
  { 20, -1, sizeof(::HaveDuplex)},
  { 26, -1, sizeof(::VoidType)},
  { 32, -1, sizeof(::OpInfo)},
  { 41, -1, sizeof(::StopInfo)},
  { 48, -1, sizeof(::TransferOpRequest)},
  { 62, -1, sizeof(::FileChunk)},
  { 72, -1, sizeof(::RegRequest)},
  { 79, -1, sizeof(::RegResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RemoteMachineInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RemoteMachineAvatar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LookupName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HaveDuplex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VoidType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OpInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StopInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransferOpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FileChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegResponse_default_instance_),
};

const char descriptor_table_protodef_warp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nwarp.proto\"<\n\021RemoteMachineInfo\022\024\n\014dis"
  "play_name\030\001 \001(\t\022\021\n\tuser_name\030\002 \001(\t\"+\n\023Re"
  "moteMachineAvatar\022\024\n\014avatar_chunk\030\001 \001(\014\""
  "/\n\nLookupName\022\n\n\002id\030\001 \001(\t\022\025\n\rreadable_na"
  "me\030\002 \001(\t\"\036\n\nHaveDuplex\022\020\n\010response\030\002 \001(\010"
  "\"\031\n\010VoidType\022\r\n\005dummy\030\001 \001(\005\"Z\n\006OpInfo\022\r\n"
  "\005ident\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\004\022\025\n\rreada"
  "ble_name\030\003 \001(\t\022\027\n\017use_compression\030\004 \001(\010\""
  "0\n\010StopInfo\022\025\n\004info\030\001 \001(\0132\007.OpInfo\022\r\n\005er"
  "ror\030\002 \001(\010\"\320\001\n\021TransferOpRequest\022\025\n\004info\030"
  "\001 \001(\0132\007.OpInfo\022\023\n\013sender_name\030\002 \001(\t\022\025\n\rr"
  "eceiver_name\030\003 \001(\t\022\020\n\010receiver\030\004 \001(\t\022\014\n\004"
  "size\030\005 \001(\004\022\r\n\005count\030\006 \001(\004\022\026\n\016name_if_sin"
  "gle\030\007 \001(\t\022\026\n\016mime_if_single\030\010 \001(\t\022\031\n\021top"
  "_dir_basenames\030\t \003(\t\"o\n\tFileChunk\022\025\n\rrel"
  "ative_path\030\001 \001(\t\022\021\n\tfile_type\030\002 \001(\005\022\026\n\016s"
  "ymlink_target\030\003 \001(\t\022\r\n\005chunk\030\004 \001(\014\022\021\n\tfi"
  "le_mode\030\005 \001(\r\"*\n\nRegRequest\022\n\n\002ip\030\001 \001(\t\022"
  "\020\n\010hostname\030\002 \001(\t\"\"\n\013RegResponse\022\023\n\013lock"
  "ed_cert\030\001 \001(\t2\362\003\n\004Warp\0223\n\025CheckDuplexCon"
  "nection\022\013.LookupName\032\013.HaveDuplex\"\000\022.\n\020W"
  "aitingForDuplex\022\013.LookupName\032\013.HaveDuple"
  "x\"\000\0229\n\024GetRemoteMachineInfo\022\013.LookupName"
  "\032\022.RemoteMachineInfo\"\000\022\?\n\026GetRemoteMachi"
  "neAvatar\022\013.LookupName\032\024.RemoteMachineAva"
  "tar\"\0000\001\022;\n\030ProcessTransferOpRequest\022\022.Tr"
  "ansferOpRequest\032\t.VoidType\"\000\022\'\n\017PauseTra"
  "nsferOp\022\007.OpInfo\032\t.VoidType\"\000\022(\n\rStartTr"
  "ansfer\022\007.OpInfo\032\n.FileChunk\"\0000\001\022/\n\027Cance"
  "lTransferOpRequest\022\007.OpInfo\032\t.VoidType\"\000"
  "\022&\n\014StopTransfer\022\t.StopInfo\032\t.VoidType\"\000"
  "\022 \n\004Ping\022\013.LookupName\032\t.VoidType\"\0002E\n\020Wa"
  "rpRegistration\0221\n\022RequestCertificate\022\013.R"
  "egRequest\032\014.RegResponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_warp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_warp_2eproto = {
  false, false, 1353, descriptor_table_protodef_warp_2eproto, "warp.proto", 
  &descriptor_table_warp_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_warp_2eproto::offsets,
  file_level_metadata_warp_2eproto, file_level_enum_descriptors_warp_2eproto, file_level_service_descriptors_warp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_warp_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_warp_2eproto);
  return descriptor_table_warp_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_warp_2eproto(&descriptor_table_warp_2eproto);

// ===================================================================

class RemoteMachineInfo::_Internal {
 public:
};

RemoteMachineInfo::RemoteMachineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RemoteMachineInfo)
}
RemoteMachineInfo::RemoteMachineInfo(const RemoteMachineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_name().empty()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:RemoteMachineInfo)
}

void RemoteMachineInfo::SharedCtor() {
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoteMachineInfo::~RemoteMachineInfo() {
  // @@protoc_insertion_point(destructor:RemoteMachineInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteMachineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteMachineInfo::ArenaDtor(void* object) {
  RemoteMachineInfo* _this = reinterpret_cast< RemoteMachineInfo* >(object);
  (void)_this;
}
void RemoteMachineInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteMachineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteMachineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteMachineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_name_.ClearToEmpty();
  user_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteMachineInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RemoteMachineInfo.display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RemoteMachineInfo.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteMachineInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteMachineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RemoteMachineInfo.display_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RemoteMachineInfo.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteMachineInfo)
  return target;
}

size_t RemoteMachineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteMachineInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteMachineInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteMachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteMachineInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteMachineInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteMachineInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteMachineInfo)
    MergeFrom(*source);
  }
}

void RemoteMachineInfo::MergeFrom(const RemoteMachineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteMachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.display_name().size() > 0) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (from.user_name().size() > 0) {
    _internal_set_user_name(from._internal_user_name());
  }
}

void RemoteMachineInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteMachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteMachineInfo::CopyFrom(const RemoteMachineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteMachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteMachineInfo::IsInitialized() const {
  return true;
}

void RemoteMachineInfo::InternalSwap(RemoteMachineInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteMachineInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoteMachineAvatar::_Internal {
 public:
};

RemoteMachineAvatar::RemoteMachineAvatar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RemoteMachineAvatar)
}
RemoteMachineAvatar::RemoteMachineAvatar(const RemoteMachineAvatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  avatar_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_chunk().empty()) {
    avatar_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_chunk(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:RemoteMachineAvatar)
}

void RemoteMachineAvatar::SharedCtor() {
avatar_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoteMachineAvatar::~RemoteMachineAvatar() {
  // @@protoc_insertion_point(destructor:RemoteMachineAvatar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteMachineAvatar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  avatar_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteMachineAvatar::ArenaDtor(void* object) {
  RemoteMachineAvatar* _this = reinterpret_cast< RemoteMachineAvatar* >(object);
  (void)_this;
}
void RemoteMachineAvatar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteMachineAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteMachineAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteMachineAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteMachineAvatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes avatar_chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_avatar_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteMachineAvatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteMachineAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes avatar_chunk = 1;
  if (this->avatar_chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_avatar_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteMachineAvatar)
  return target;
}

size_t RemoteMachineAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteMachineAvatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes avatar_chunk = 1;
  if (this->avatar_chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_chunk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteMachineAvatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteMachineAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteMachineAvatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteMachineAvatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteMachineAvatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteMachineAvatar)
    MergeFrom(*source);
  }
}

void RemoteMachineAvatar::MergeFrom(const RemoteMachineAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteMachineAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_chunk().size() > 0) {
    _internal_set_avatar_chunk(from._internal_avatar_chunk());
  }
}

void RemoteMachineAvatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteMachineAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteMachineAvatar::CopyFrom(const RemoteMachineAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteMachineAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteMachineAvatar::IsInitialized() const {
  return true;
}

void RemoteMachineAvatar::InternalSwap(RemoteMachineAvatar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  avatar_chunk_.Swap(&other->avatar_chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteMachineAvatar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LookupName::_Internal {
 public:
};

LookupName::LookupName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LookupName)
}
LookupName::LookupName(const LookupName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  readable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_readable_name().empty()) {
    readable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_readable_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LookupName)
}

void LookupName::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
readable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LookupName::~LookupName() {
  // @@protoc_insertion_point(destructor:LookupName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LookupName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  readable_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LookupName::ArenaDtor(void* object) {
  LookupName* _this = reinterpret_cast< LookupName* >(object);
  (void)_this;
}
void LookupName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupName::Clear() {
// @@protoc_insertion_point(message_clear_start:LookupName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  readable_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LookupName.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string readable_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_readable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LookupName.readable_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LookupName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LookupName.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string readable_name = 2;
  if (this->readable_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_readable_name().data(), static_cast<int>(this->_internal_readable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LookupName.readable_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_readable_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LookupName)
  return target;
}

size_t LookupName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LookupName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string readable_name = 2;
  if (this->readable_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_readable_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LookupName)
  GOOGLE_DCHECK_NE(&from, this);
  const LookupName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LookupName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LookupName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LookupName)
    MergeFrom(*source);
  }
}

void LookupName::MergeFrom(const LookupName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LookupName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.readable_name().size() > 0) {
    _internal_set_readable_name(from._internal_readable_name());
  }
}

void LookupName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LookupName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupName::CopyFrom(const LookupName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LookupName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupName::IsInitialized() const {
  return true;
}

void LookupName::InternalSwap(LookupName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  readable_name_.Swap(&other->readable_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HaveDuplex::_Internal {
 public:
};

HaveDuplex::HaveDuplex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HaveDuplex)
}
HaveDuplex::HaveDuplex(const HaveDuplex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:HaveDuplex)
}

void HaveDuplex::SharedCtor() {
response_ = false;
}

HaveDuplex::~HaveDuplex() {
  // @@protoc_insertion_point(destructor:HaveDuplex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HaveDuplex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HaveDuplex::ArenaDtor(void* object) {
  HaveDuplex* _this = reinterpret_cast< HaveDuplex* >(object);
  (void)_this;
}
void HaveDuplex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HaveDuplex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HaveDuplex::Clear() {
// @@protoc_insertion_point(message_clear_start:HaveDuplex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HaveDuplex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HaveDuplex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HaveDuplex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool response = 2;
  if (this->response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HaveDuplex)
  return target;
}

size_t HaveDuplex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HaveDuplex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool response = 2;
  if (this->response() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HaveDuplex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HaveDuplex)
  GOOGLE_DCHECK_NE(&from, this);
  const HaveDuplex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HaveDuplex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HaveDuplex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HaveDuplex)
    MergeFrom(*source);
  }
}

void HaveDuplex::MergeFrom(const HaveDuplex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HaveDuplex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response() != 0) {
    _internal_set_response(from._internal_response());
  }
}

void HaveDuplex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HaveDuplex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaveDuplex::CopyFrom(const HaveDuplex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HaveDuplex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaveDuplex::IsInitialized() const {
  return true;
}

void HaveDuplex::InternalSwap(HaveDuplex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HaveDuplex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoidType::_Internal {
 public:
};

VoidType::VoidType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VoidType)
}
VoidType::VoidType(const VoidType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:VoidType)
}

void VoidType::SharedCtor() {
dummy_ = 0;
}

VoidType::~VoidType() {
  // @@protoc_insertion_point(destructor:VoidType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoidType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VoidType::ArenaDtor(void* object) {
  VoidType* _this = reinterpret_cast< VoidType* >(object);
  (void)_this;
}
void VoidType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoidType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoidType::Clear() {
// @@protoc_insertion_point(message_clear_start:VoidType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoidType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoidType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoidType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dummy = 1;
  if (this->dummy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoidType)
  return target;
}

size_t VoidType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VoidType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dummy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoidType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VoidType)
  GOOGLE_DCHECK_NE(&from, this);
  const VoidType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoidType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VoidType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VoidType)
    MergeFrom(*source);
  }
}

void VoidType::MergeFrom(const VoidType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VoidType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dummy() != 0) {
    _internal_set_dummy(from._internal_dummy());
  }
}

void VoidType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VoidType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoidType::CopyFrom(const VoidType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoidType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoidType::IsInitialized() const {
  return true;
}

void VoidType::InternalSwap(VoidType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(dummy_, other->dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoidType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpInfo::_Internal {
 public:
};

OpInfo::OpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OpInfo)
}
OpInfo::OpInfo(const OpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ident_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ident().empty()) {
    ident_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ident(), 
      GetArena());
  }
  readable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_readable_name().empty()) {
    readable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_readable_name(), 
      GetArena());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_compression_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(use_compression_));
  // @@protoc_insertion_point(copy_constructor:OpInfo)
}

void OpInfo::SharedCtor() {
ident_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
readable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_compression_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(use_compression_));
}

OpInfo::~OpInfo() {
  // @@protoc_insertion_point(destructor:OpInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ident_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  readable_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpInfo::ArenaDtor(void* object) {
  OpInfo* _this = reinterpret_cast< OpInfo* >(object);
  (void)_this;
}
void OpInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ident_.ClearToEmpty();
  readable_name_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_compression_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(use_compression_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ident = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ident();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OpInfo.ident"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string readable_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_readable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OpInfo.readable_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_compression = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_compression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ident = 1;
  if (this->ident().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ident().data(), static_cast<int>(this->_internal_ident().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OpInfo.ident");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ident(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // string readable_name = 3;
  if (this->readable_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_readable_name().data(), static_cast<int>(this->_internal_readable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OpInfo.readable_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_readable_name(), target);
  }

  // bool use_compression = 4;
  if (this->use_compression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_compression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpInfo)
  return target;
}

size_t OpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ident = 1;
  if (this->ident().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ident());
  }

  // string readable_name = 3;
  if (this->readable_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_readable_name());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // bool use_compression = 4;
  if (this->use_compression() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OpInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpInfo)
    MergeFrom(*source);
  }
}

void OpInfo::MergeFrom(const OpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ident().size() > 0) {
    _internal_set_ident(from._internal_ident());
  }
  if (from.readable_name().size() > 0) {
    _internal_set_readable_name(from._internal_readable_name());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.use_compression() != 0) {
    _internal_set_use_compression(from._internal_use_compression());
  }
}

void OpInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInfo::CopyFrom(const OpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpInfo::IsInitialized() const {
  return true;
}

void OpInfo::InternalSwap(OpInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ident_.Swap(&other->ident_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  readable_name_.Swap(&other->readable_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpInfo, use_compression_)
      + sizeof(OpInfo::use_compression_)
      - PROTOBUF_FIELD_OFFSET(OpInfo, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StopInfo::_Internal {
 public:
  static const ::OpInfo& info(const StopInfo* msg);
};

const ::OpInfo&
StopInfo::_Internal::info(const StopInfo* msg) {
  return *msg->info_;
}
StopInfo::StopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StopInfo)
}
StopInfo::StopInfo(const StopInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::OpInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:StopInfo)
}

void StopInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&info_)) + sizeof(error_));
}

StopInfo::~StopInfo() {
  // @@protoc_insertion_point(destructor:StopInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void StopInfo::ArenaDtor(void* object) {
  StopInfo* _this = reinterpret_cast< StopInfo* >(object);
  (void)_this;
}
void StopInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  error_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OpInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OpInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // bool error = 2;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StopInfo)
  return target;
}

size_t StopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OpInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // bool error = 2;
  if (this->error() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StopInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopInfo)
    MergeFrom(*source);
  }
}

void StopInfo::MergeFrom(const StopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::OpInfo::MergeFrom(from._internal_info());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void StopInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopInfo::CopyFrom(const StopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopInfo::IsInitialized() const {
  return true;
}

void StopInfo::InternalSwap(StopInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopInfo, error_)
      + sizeof(StopInfo::error_)
      - PROTOBUF_FIELD_OFFSET(StopInfo, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferOpRequest::_Internal {
 public:
  static const ::OpInfo& info(const TransferOpRequest* msg);
};

const ::OpInfo&
TransferOpRequest::_Internal::info(const TransferOpRequest* msg) {
  return *msg->info_;
}
TransferOpRequest::TransferOpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  top_dir_basenames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TransferOpRequest)
}
TransferOpRequest::TransferOpRequest(const TransferOpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      top_dir_basenames_(from.top_dir_basenames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_name().empty()) {
    sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_name(), 
      GetArena());
  }
  receiver_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_name().empty()) {
    receiver_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver_name(), 
      GetArena());
  }
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver().empty()) {
    receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver(), 
      GetArena());
  }
  name_if_single_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_if_single().empty()) {
    name_if_single_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_if_single(), 
      GetArena());
  }
  mime_if_single_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mime_if_single().empty()) {
    mime_if_single_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mime_if_single(), 
      GetArena());
  }
  if (from._internal_has_info()) {
    info_ = new ::OpInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&size_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TransferOpRequest)
}

void TransferOpRequest::SharedCtor() {
sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
receiver_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_if_single_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mime_if_single_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&info_)) + sizeof(count_));
}

TransferOpRequest::~TransferOpRequest() {
  // @@protoc_insertion_point(destructor:TransferOpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferOpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_if_single_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mime_if_single_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void TransferOpRequest::ArenaDtor(void* object) {
  TransferOpRequest* _this = reinterpret_cast< TransferOpRequest* >(object);
  (void)_this;
}
void TransferOpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferOpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferOpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TransferOpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top_dir_basenames_.Clear();
  sender_name_.ClearToEmpty();
  receiver_name_.ClearToEmpty();
  receiver_.ClearToEmpty();
  name_if_single_.ClearToEmpty();
  mime_if_single_.ClearToEmpty();
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&size_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferOpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OpInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TransferOpRequest.sender_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_receiver_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TransferOpRequest.receiver_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string receiver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TransferOpRequest.receiver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name_if_single = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_name_if_single();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TransferOpRequest.name_if_single"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mime_if_single = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_mime_if_single();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TransferOpRequest.mime_if_single"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string top_dir_basenames = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_top_dir_basenames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TransferOpRequest.top_dir_basenames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferOpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransferOpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OpInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // string sender_name = 2;
  if (this->sender_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransferOpRequest.sender_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sender_name(), target);
  }

  // string receiver_name = 3;
  if (this->receiver_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_name().data(), static_cast<int>(this->_internal_receiver_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransferOpRequest.receiver_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receiver_name(), target);
  }

  // string receiver = 4;
  if (this->receiver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransferOpRequest.receiver");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_receiver(), target);
  }

  // uint64 size = 5;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size(), target);
  }

  // uint64 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_count(), target);
  }

  // string name_if_single = 7;
  if (this->name_if_single().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_if_single().data(), static_cast<int>(this->_internal_name_if_single().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransferOpRequest.name_if_single");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name_if_single(), target);
  }

  // string mime_if_single = 8;
  if (this->mime_if_single().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_if_single().data(), static_cast<int>(this->_internal_mime_if_single().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransferOpRequest.mime_if_single");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_mime_if_single(), target);
  }

  // repeated string top_dir_basenames = 9;
  for (int i = 0, n = this->_internal_top_dir_basenames_size(); i < n; i++) {
    const auto& s = this->_internal_top_dir_basenames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransferOpRequest.top_dir_basenames");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransferOpRequest)
  return target;
}

size_t TransferOpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransferOpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string top_dir_basenames = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(top_dir_basenames_.size());
  for (int i = 0, n = top_dir_basenames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      top_dir_basenames_.Get(i));
  }

  // string sender_name = 2;
  if (this->sender_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_name());
  }

  // string receiver_name = 3;
  if (this->receiver_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_name());
  }

  // string receiver = 4;
  if (this->receiver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  // string name_if_single = 7;
  if (this->name_if_single().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_if_single());
  }

  // string mime_if_single = 8;
  if (this->mime_if_single().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_if_single());
  }

  // .OpInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // uint64 size = 5;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // uint64 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferOpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransferOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferOpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferOpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransferOpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransferOpRequest)
    MergeFrom(*source);
  }
}

void TransferOpRequest::MergeFrom(const TransferOpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransferOpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_dir_basenames_.MergeFrom(from.top_dir_basenames_);
  if (from.sender_name().size() > 0) {
    _internal_set_sender_name(from._internal_sender_name());
  }
  if (from.receiver_name().size() > 0) {
    _internal_set_receiver_name(from._internal_receiver_name());
  }
  if (from.receiver().size() > 0) {
    _internal_set_receiver(from._internal_receiver());
  }
  if (from.name_if_single().size() > 0) {
    _internal_set_name_if_single(from._internal_name_if_single());
  }
  if (from.mime_if_single().size() > 0) {
    _internal_set_mime_if_single(from._internal_mime_if_single());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::OpInfo::MergeFrom(from._internal_info());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void TransferOpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransferOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferOpRequest::CopyFrom(const TransferOpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransferOpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferOpRequest::IsInitialized() const {
  return true;
}

void TransferOpRequest::InternalSwap(TransferOpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  top_dir_basenames_.InternalSwap(&other->top_dir_basenames_);
  sender_name_.Swap(&other->sender_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_name_.Swap(&other->receiver_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  receiver_.Swap(&other->receiver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_if_single_.Swap(&other->name_if_single_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mime_if_single_.Swap(&other->mime_if_single_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferOpRequest, count_)
      + sizeof(TransferOpRequest::count_)
      - PROTOBUF_FIELD_OFFSET(TransferOpRequest, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferOpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileChunk::_Internal {
 public:
};

FileChunk::FileChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FileChunk)
}
FileChunk::FileChunk(const FileChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  relative_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_relative_path().empty()) {
    relative_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_relative_path(), 
      GetArena());
  }
  symlink_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symlink_target().empty()) {
    symlink_target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symlink_target(), 
      GetArena());
  }
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chunk().empty()) {
    chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chunk(), 
      GetArena());
  }
  ::memcpy(&file_type_, &from.file_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_mode_) -
    reinterpret_cast<char*>(&file_type_)) + sizeof(file_mode_));
  // @@protoc_insertion_point(copy_constructor:FileChunk)
}

void FileChunk::SharedCtor() {
relative_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symlink_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_mode_) -
    reinterpret_cast<char*>(&file_type_)) + sizeof(file_mode_));
}

FileChunk::~FileChunk() {
  // @@protoc_insertion_point(destructor:FileChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  relative_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symlink_target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileChunk::ArenaDtor(void* object) {
  FileChunk* _this = reinterpret_cast< FileChunk* >(object);
  (void)_this;
}
void FileChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:FileChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_path_.ClearToEmpty();
  symlink_target_.ClearToEmpty();
  chunk_.ClearToEmpty();
  ::memset(&file_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_mode_) -
      reinterpret_cast<char*>(&file_type_)) + sizeof(file_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string relative_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_relative_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FileChunk.relative_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 file_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          file_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symlink_target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symlink_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FileChunk.symlink_target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chunk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          file_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string relative_path = 1;
  if (this->relative_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_relative_path().data(), static_cast<int>(this->_internal_relative_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FileChunk.relative_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_relative_path(), target);
  }

  // int32 file_type = 2;
  if (this->file_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_file_type(), target);
  }

  // string symlink_target = 3;
  if (this->symlink_target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symlink_target().data(), static_cast<int>(this->_internal_symlink_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FileChunk.symlink_target");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symlink_target(), target);
  }

  // bytes chunk = 4;
  if (this->chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_chunk(), target);
  }

  // uint32 file_mode = 5;
  if (this->file_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_file_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileChunk)
  return target;
}

size_t FileChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string relative_path = 1;
  if (this->relative_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relative_path());
  }

  // string symlink_target = 3;
  if (this->symlink_target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symlink_target());
  }

  // bytes chunk = 4;
  if (this->chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  // int32 file_type = 2;
  if (this->file_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_file_type());
  }

  // uint32 file_mode = 5;
  if (this->file_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const FileChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileChunk)
    MergeFrom(*source);
  }
}

void FileChunk::MergeFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.relative_path().size() > 0) {
    _internal_set_relative_path(from._internal_relative_path());
  }
  if (from.symlink_target().size() > 0) {
    _internal_set_symlink_target(from._internal_symlink_target());
  }
  if (from.chunk().size() > 0) {
    _internal_set_chunk(from._internal_chunk());
  }
  if (from.file_type() != 0) {
    _internal_set_file_type(from._internal_file_type());
  }
  if (from.file_mode() != 0) {
    _internal_set_file_mode(from._internal_file_mode());
  }
}

void FileChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileChunk::CopyFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileChunk::IsInitialized() const {
  return true;
}

void FileChunk::InternalSwap(FileChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  relative_path_.Swap(&other->relative_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symlink_target_.Swap(&other->symlink_target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chunk_.Swap(&other->chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileChunk, file_mode_)
      + sizeof(FileChunk::file_mode_)
      - PROTOBUF_FIELD_OFFSET(FileChunk, file_type_)>(
          reinterpret_cast<char*>(&file_type_),
          reinterpret_cast<char*>(&other->file_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegRequest::_Internal {
 public:
};

RegRequest::RegRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RegRequest)
}
RegRequest::RegRequest(const RegRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:RegRequest)
}

void RegRequest::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegRequest::~RegRequest() {
  // @@protoc_insertion_point(destructor:RegRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegRequest::ArenaDtor(void* object) {
  RegRequest* _this = reinterpret_cast< RegRequest* >(object);
  (void)_this;
}
void RegRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RegRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  hostname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegRequest.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegRequest.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegRequest.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegRequest.hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegRequest)
  return target;
}

size_t RegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegRequest)
    MergeFrom(*source);
  }
}

void RegRequest::MergeFrom(const RegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
}

void RegRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegRequest::CopyFrom(const RegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegRequest::IsInitialized() const {
  return true;
}

void RegRequest::InternalSwap(RegRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegResponse::_Internal {
 public:
};

RegResponse::RegResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RegResponse)
}
RegResponse::RegResponse(const RegResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  locked_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locked_cert().empty()) {
    locked_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locked_cert(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:RegResponse)
}

void RegResponse::SharedCtor() {
locked_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegResponse::~RegResponse() {
  // @@protoc_insertion_point(destructor:RegResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  locked_cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegResponse::ArenaDtor(void* object) {
  RegResponse* _this = reinterpret_cast< RegResponse* >(object);
  (void)_this;
}
void RegResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RegResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locked_cert_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string locked_cert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_locked_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RegResponse.locked_cert"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string locked_cert = 1;
  if (this->locked_cert().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locked_cert().data(), static_cast<int>(this->_internal_locked_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegResponse.locked_cert");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_locked_cert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegResponse)
  return target;
}

size_t RegResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string locked_cert = 1;
  if (this->locked_cert().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locked_cert());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegResponse)
    MergeFrom(*source);
  }
}

void RegResponse::MergeFrom(const RegResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.locked_cert().size() > 0) {
    _internal_set_locked_cert(from._internal_locked_cert());
  }
}

void RegResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegResponse::CopyFrom(const RegResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegResponse::IsInitialized() const {
  return true;
}

void RegResponse::InternalSwap(RegResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  locked_cert_.Swap(&other->locked_cert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RemoteMachineInfo* Arena::CreateMaybeMessage< ::RemoteMachineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteMachineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteMachineAvatar* Arena::CreateMaybeMessage< ::RemoteMachineAvatar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteMachineAvatar >(arena);
}
template<> PROTOBUF_NOINLINE ::LookupName* Arena::CreateMaybeMessage< ::LookupName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LookupName >(arena);
}
template<> PROTOBUF_NOINLINE ::HaveDuplex* Arena::CreateMaybeMessage< ::HaveDuplex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HaveDuplex >(arena);
}
template<> PROTOBUF_NOINLINE ::VoidType* Arena::CreateMaybeMessage< ::VoidType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VoidType >(arena);
}
template<> PROTOBUF_NOINLINE ::OpInfo* Arena::CreateMaybeMessage< ::OpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StopInfo* Arena::CreateMaybeMessage< ::StopInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StopInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TransferOpRequest* Arena::CreateMaybeMessage< ::TransferOpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransferOpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FileChunk* Arena::CreateMaybeMessage< ::FileChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FileChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::RegRequest* Arena::CreateMaybeMessage< ::RegRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RegResponse* Arena::CreateMaybeMessage< ::RegResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
