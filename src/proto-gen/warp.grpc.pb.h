// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: warp.proto
#ifndef GRPC_warp_2eproto__INCLUDED
#define GRPC_warp_2eproto__INCLUDED

#include "warp.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

// ************ Important! ***************
//
// If you change anything here, you *must* run 'generate-protobuf' to update the
// generated stub files.
//
// Never change the existing members and member values of messages, only add new ones.
//
class Warp final {
 public:
  static constexpr char const* service_full_name() {
    return "Warp";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sender methods
    // api v1 duplex method (ping style)
    virtual ::grpc::Status CheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName& request, ::HaveDuplex* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>> AsyncCheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>>(AsyncCheckDuplexConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>> PrepareAsyncCheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>>(PrepareAsyncCheckDuplexConnectionRaw(context, request, cq));
    }
    // api v2 duplex method (block/future)
    virtual ::grpc::Status WaitingForDuplex(::grpc::ClientContext* context, const ::LookupName& request, ::HaveDuplex* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>> AsyncWaitingForDuplex(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>>(AsyncWaitingForDuplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>> PrepareAsyncWaitingForDuplex(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>>(PrepareAsyncWaitingForDuplexRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName& request, ::RemoteMachineInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RemoteMachineInfo>> AsyncGetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RemoteMachineInfo>>(AsyncGetRemoteMachineInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RemoteMachineInfo>> PrepareAsyncGetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RemoteMachineInfo>>(PrepareAsyncGetRemoteMachineInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::RemoteMachineAvatar>> GetRemoteMachineAvatar(::grpc::ClientContext* context, const ::LookupName& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::RemoteMachineAvatar>>(GetRemoteMachineAvatarRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RemoteMachineAvatar>> AsyncGetRemoteMachineAvatar(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RemoteMachineAvatar>>(AsyncGetRemoteMachineAvatarRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RemoteMachineAvatar>> PrepareAsyncGetRemoteMachineAvatar(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::RemoteMachineAvatar>>(PrepareAsyncGetRemoteMachineAvatarRaw(context, request, cq));
    }
    virtual ::grpc::Status ProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest& request, ::VoidType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>> AsyncProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>>(AsyncProcessTransferOpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>> PrepareAsyncProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>>(PrepareAsyncProcessTransferOpRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status PauseTransferOp(::grpc::ClientContext* context, const ::OpInfo& request, ::VoidType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>> AsyncPauseTransferOp(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>>(AsyncPauseTransferOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>> PrepareAsyncPauseTransferOp(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>>(PrepareAsyncPauseTransferOpRaw(context, request, cq));
    }
    // Receiver methods
    std::unique_ptr< ::grpc::ClientReaderInterface< ::FileChunk>> StartTransfer(::grpc::ClientContext* context, const ::OpInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::FileChunk>>(StartTransferRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileChunk>> AsyncStartTransfer(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileChunk>>(AsyncStartTransferRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileChunk>> PrepareAsyncStartTransfer(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FileChunk>>(PrepareAsyncStartTransferRaw(context, request, cq));
    }
    // Both
    virtual ::grpc::Status CancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo& request, ::VoidType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>> AsyncCancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>>(AsyncCancelTransferOpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>> PrepareAsyncCancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>>(PrepareAsyncCancelTransferOpRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status StopTransfer(::grpc::ClientContext* context, const ::StopInfo& request, ::VoidType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>> AsyncStopTransfer(::grpc::ClientContext* context, const ::StopInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>>(AsyncStopTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>> PrepareAsyncStopTransfer(::grpc::ClientContext* context, const ::StopInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>>(PrepareAsyncStopTransferRaw(context, request, cq));
    }
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::LookupName& request, ::VoidType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>> AsyncPing(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>> PrepareAsyncPing(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>>(PrepareAsyncPingRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sender methods
      // api v1 duplex method (ping style)
      virtual void CheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // api v2 duplex method (block/future)
      virtual void WaitingForDuplex(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WaitingForDuplex(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void WaitingForDuplex(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName* request, ::RemoteMachineInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName* request, ::RemoteMachineInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName* request, ::RemoteMachineInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRemoteMachineAvatar(::grpc::ClientContext* context, const ::LookupName* request, ::grpc::ClientReadReactor< ::RemoteMachineAvatar>* reactor) = 0;
      #else
      virtual void GetRemoteMachineAvatar(::grpc::ClientContext* context, const ::LookupName* request, ::grpc::experimental::ClientReadReactor< ::RemoteMachineAvatar>* reactor) = 0;
      #endif
      virtual void ProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest* request, ::VoidType* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest* request, ::VoidType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest* request, ::VoidType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PauseTransferOp(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PauseTransferOp(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PauseTransferOp(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Receiver methods
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartTransfer(::grpc::ClientContext* context, const ::OpInfo* request, ::grpc::ClientReadReactor< ::FileChunk>* reactor) = 0;
      #else
      virtual void StartTransfer(::grpc::ClientContext* context, const ::OpInfo* request, ::grpc::experimental::ClientReadReactor< ::FileChunk>* reactor) = 0;
      #endif
      // Both
      virtual void CancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StopTransfer(::grpc::ClientContext* context, const ::StopInfo* request, ::VoidType* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopTransfer(::grpc::ClientContext* context, const ::StopInfo* request, ::VoidType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopTransfer(::grpc::ClientContext* context, const ::StopInfo* request, ::VoidType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Ping(::grpc::ClientContext* context, const ::LookupName* request, ::VoidType* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Ping(::grpc::ClientContext* context, const ::LookupName* request, ::VoidType* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Ping(::grpc::ClientContext* context, const ::LookupName* request, ::VoidType* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>* AsyncCheckDuplexConnectionRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>* PrepareAsyncCheckDuplexConnectionRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>* AsyncWaitingForDuplexRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HaveDuplex>* PrepareAsyncWaitingForDuplexRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RemoteMachineInfo>* AsyncGetRemoteMachineInfoRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RemoteMachineInfo>* PrepareAsyncGetRemoteMachineInfoRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::RemoteMachineAvatar>* GetRemoteMachineAvatarRaw(::grpc::ClientContext* context, const ::LookupName& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::RemoteMachineAvatar>* AsyncGetRemoteMachineAvatarRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::RemoteMachineAvatar>* PrepareAsyncGetRemoteMachineAvatarRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>* AsyncProcessTransferOpRequestRaw(::grpc::ClientContext* context, const ::TransferOpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>* PrepareAsyncProcessTransferOpRequestRaw(::grpc::ClientContext* context, const ::TransferOpRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>* AsyncPauseTransferOpRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>* PrepareAsyncPauseTransferOpRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::FileChunk>* StartTransferRaw(::grpc::ClientContext* context, const ::OpInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::FileChunk>* AsyncStartTransferRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::FileChunk>* PrepareAsyncStartTransferRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>* AsyncCancelTransferOpRequestRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>* PrepareAsyncCancelTransferOpRequestRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>* AsyncStopTransferRaw(::grpc::ClientContext* context, const ::StopInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>* PrepareAsyncStopTransferRaw(::grpc::ClientContext* context, const ::StopInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>* AsyncPingRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::VoidType>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName& request, ::HaveDuplex* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HaveDuplex>> AsyncCheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HaveDuplex>>(AsyncCheckDuplexConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HaveDuplex>> PrepareAsyncCheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HaveDuplex>>(PrepareAsyncCheckDuplexConnectionRaw(context, request, cq));
    }
    ::grpc::Status WaitingForDuplex(::grpc::ClientContext* context, const ::LookupName& request, ::HaveDuplex* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HaveDuplex>> AsyncWaitingForDuplex(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HaveDuplex>>(AsyncWaitingForDuplexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HaveDuplex>> PrepareAsyncWaitingForDuplex(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HaveDuplex>>(PrepareAsyncWaitingForDuplexRaw(context, request, cq));
    }
    ::grpc::Status GetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName& request, ::RemoteMachineInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RemoteMachineInfo>> AsyncGetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RemoteMachineInfo>>(AsyncGetRemoteMachineInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RemoteMachineInfo>> PrepareAsyncGetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RemoteMachineInfo>>(PrepareAsyncGetRemoteMachineInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::RemoteMachineAvatar>> GetRemoteMachineAvatar(::grpc::ClientContext* context, const ::LookupName& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::RemoteMachineAvatar>>(GetRemoteMachineAvatarRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::RemoteMachineAvatar>> AsyncGetRemoteMachineAvatar(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::RemoteMachineAvatar>>(AsyncGetRemoteMachineAvatarRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::RemoteMachineAvatar>> PrepareAsyncGetRemoteMachineAvatar(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::RemoteMachineAvatar>>(PrepareAsyncGetRemoteMachineAvatarRaw(context, request, cq));
    }
    ::grpc::Status ProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest& request, ::VoidType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>> AsyncProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>>(AsyncProcessTransferOpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>> PrepareAsyncProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>>(PrepareAsyncProcessTransferOpRequestRaw(context, request, cq));
    }
    ::grpc::Status PauseTransferOp(::grpc::ClientContext* context, const ::OpInfo& request, ::VoidType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>> AsyncPauseTransferOp(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>>(AsyncPauseTransferOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>> PrepareAsyncPauseTransferOp(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>>(PrepareAsyncPauseTransferOpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::FileChunk>> StartTransfer(::grpc::ClientContext* context, const ::OpInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::FileChunk>>(StartTransferRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::FileChunk>> AsyncStartTransfer(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::FileChunk>>(AsyncStartTransferRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::FileChunk>> PrepareAsyncStartTransfer(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::FileChunk>>(PrepareAsyncStartTransferRaw(context, request, cq));
    }
    ::grpc::Status CancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo& request, ::VoidType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>> AsyncCancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>>(AsyncCancelTransferOpRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>> PrepareAsyncCancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>>(PrepareAsyncCancelTransferOpRequestRaw(context, request, cq));
    }
    ::grpc::Status StopTransfer(::grpc::ClientContext* context, const ::StopInfo& request, ::VoidType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>> AsyncStopTransfer(::grpc::ClientContext* context, const ::StopInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>>(AsyncStopTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>> PrepareAsyncStopTransfer(::grpc::ClientContext* context, const ::StopInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>>(PrepareAsyncStopTransferRaw(context, request, cq));
    }
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::LookupName& request, ::VoidType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>> AsyncPing(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>> PrepareAsyncPing(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::VoidType>>(PrepareAsyncPingRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckDuplexConnection(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void WaitingForDuplex(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WaitingForDuplex(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void WaitingForDuplex(::grpc::ClientContext* context, const ::LookupName* request, ::HaveDuplex* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName* request, ::RemoteMachineInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName* request, ::RemoteMachineInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRemoteMachineInfo(::grpc::ClientContext* context, const ::LookupName* request, ::RemoteMachineInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRemoteMachineAvatar(::grpc::ClientContext* context, const ::LookupName* request, ::grpc::ClientReadReactor< ::RemoteMachineAvatar>* reactor) override;
      #else
      void GetRemoteMachineAvatar(::grpc::ClientContext* context, const ::LookupName* request, ::grpc::experimental::ClientReadReactor< ::RemoteMachineAvatar>* reactor) override;
      #endif
      void ProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest* request, ::VoidType* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest* request, ::VoidType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ProcessTransferOpRequest(::grpc::ClientContext* context, const ::TransferOpRequest* request, ::VoidType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PauseTransferOp(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PauseTransferOp(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PauseTransferOp(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartTransfer(::grpc::ClientContext* context, const ::OpInfo* request, ::grpc::ClientReadReactor< ::FileChunk>* reactor) override;
      #else
      void StartTransfer(::grpc::ClientContext* context, const ::OpInfo* request, ::grpc::experimental::ClientReadReactor< ::FileChunk>* reactor) override;
      #endif
      void CancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CancelTransferOpRequest(::grpc::ClientContext* context, const ::OpInfo* request, ::VoidType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopTransfer(::grpc::ClientContext* context, const ::StopInfo* request, ::VoidType* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopTransfer(::grpc::ClientContext* context, const ::StopInfo* request, ::VoidType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopTransfer(::grpc::ClientContext* context, const ::StopInfo* request, ::VoidType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Ping(::grpc::ClientContext* context, const ::LookupName* request, ::VoidType* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Ping(::grpc::ClientContext* context, const ::LookupName* request, ::VoidType* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Ping(::grpc::ClientContext* context, const ::LookupName* request, ::VoidType* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::HaveDuplex>* AsyncCheckDuplexConnectionRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HaveDuplex>* PrepareAsyncCheckDuplexConnectionRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HaveDuplex>* AsyncWaitingForDuplexRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HaveDuplex>* PrepareAsyncWaitingForDuplexRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RemoteMachineInfo>* AsyncGetRemoteMachineInfoRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RemoteMachineInfo>* PrepareAsyncGetRemoteMachineInfoRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::RemoteMachineAvatar>* GetRemoteMachineAvatarRaw(::grpc::ClientContext* context, const ::LookupName& request) override;
    ::grpc::ClientAsyncReader< ::RemoteMachineAvatar>* AsyncGetRemoteMachineAvatarRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::RemoteMachineAvatar>* PrepareAsyncGetRemoteMachineAvatarRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoidType>* AsyncProcessTransferOpRequestRaw(::grpc::ClientContext* context, const ::TransferOpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoidType>* PrepareAsyncProcessTransferOpRequestRaw(::grpc::ClientContext* context, const ::TransferOpRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoidType>* AsyncPauseTransferOpRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoidType>* PrepareAsyncPauseTransferOpRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::FileChunk>* StartTransferRaw(::grpc::ClientContext* context, const ::OpInfo& request) override;
    ::grpc::ClientAsyncReader< ::FileChunk>* AsyncStartTransferRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::FileChunk>* PrepareAsyncStartTransferRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoidType>* AsyncCancelTransferOpRequestRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoidType>* PrepareAsyncCancelTransferOpRequestRaw(::grpc::ClientContext* context, const ::OpInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoidType>* AsyncStopTransferRaw(::grpc::ClientContext* context, const ::StopInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoidType>* PrepareAsyncStopTransferRaw(::grpc::ClientContext* context, const ::StopInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoidType>* AsyncPingRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::VoidType>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::LookupName& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckDuplexConnection_;
    const ::grpc::internal::RpcMethod rpcmethod_WaitingForDuplex_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRemoteMachineInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRemoteMachineAvatar_;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessTransferOpRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_PauseTransferOp_;
    const ::grpc::internal::RpcMethod rpcmethod_StartTransfer_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelTransferOpRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_StopTransfer_;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sender methods
    // api v1 duplex method (ping style)
    virtual ::grpc::Status CheckDuplexConnection(::grpc::ServerContext* context, const ::LookupName* request, ::HaveDuplex* response);
    // api v2 duplex method (block/future)
    virtual ::grpc::Status WaitingForDuplex(::grpc::ServerContext* context, const ::LookupName* request, ::HaveDuplex* response);
    virtual ::grpc::Status GetRemoteMachineInfo(::grpc::ServerContext* context, const ::LookupName* request, ::RemoteMachineInfo* response);
    virtual ::grpc::Status GetRemoteMachineAvatar(::grpc::ServerContext* context, const ::LookupName* request, ::grpc::ServerWriter< ::RemoteMachineAvatar>* writer);
    virtual ::grpc::Status ProcessTransferOpRequest(::grpc::ServerContext* context, const ::TransferOpRequest* request, ::VoidType* response);
    virtual ::grpc::Status PauseTransferOp(::grpc::ServerContext* context, const ::OpInfo* request, ::VoidType* response);
    // Receiver methods
    virtual ::grpc::Status StartTransfer(::grpc::ServerContext* context, const ::OpInfo* request, ::grpc::ServerWriter< ::FileChunk>* writer);
    // Both
    virtual ::grpc::Status CancelTransferOpRequest(::grpc::ServerContext* context, const ::OpInfo* request, ::VoidType* response);
    virtual ::grpc::Status StopTransfer(::grpc::ServerContext* context, const ::StopInfo* request, ::VoidType* response);
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::LookupName* request, ::VoidType* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckDuplexConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckDuplexConnection() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CheckDuplexConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckDuplexConnection(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckDuplexConnection(::grpc::ServerContext* context, ::LookupName* request, ::grpc::ServerAsyncResponseWriter< ::HaveDuplex>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WaitingForDuplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WaitingForDuplex() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WaitingForDuplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitingForDuplex(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWaitingForDuplex(::grpc::ServerContext* context, ::LookupName* request, ::grpc::ServerAsyncResponseWriter< ::HaveDuplex>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRemoteMachineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRemoteMachineInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetRemoteMachineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteMachineInfo(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::RemoteMachineInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteMachineInfo(::grpc::ServerContext* context, ::LookupName* request, ::grpc::ServerAsyncResponseWriter< ::RemoteMachineInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRemoteMachineAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRemoteMachineAvatar() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetRemoteMachineAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteMachineAvatar(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::grpc::ServerWriter< ::RemoteMachineAvatar>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteMachineAvatar(::grpc::ServerContext* context, ::LookupName* request, ::grpc::ServerAsyncWriter< ::RemoteMachineAvatar>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessTransferOpRequest() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ProcessTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessTransferOpRequest(::grpc::ServerContext* /*context*/, const ::TransferOpRequest* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessTransferOpRequest(::grpc::ServerContext* context, ::TransferOpRequest* request, ::grpc::ServerAsyncResponseWriter< ::VoidType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PauseTransferOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PauseTransferOp() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PauseTransferOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseTransferOp(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseTransferOp(::grpc::ServerContext* context, ::OpInfo* request, ::grpc::ServerAsyncResponseWriter< ::VoidType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartTransfer() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_StartTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTransfer(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::grpc::ServerWriter< ::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartTransfer(::grpc::ServerContext* context, ::OpInfo* request, ::grpc::ServerAsyncWriter< ::FileChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelTransferOpRequest() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CancelTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelTransferOpRequest(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelTransferOpRequest(::grpc::ServerContext* context, ::OpInfo* request, ::grpc::ServerAsyncResponseWriter< ::VoidType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopTransfer() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_StopTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTransfer(::grpc::ServerContext* /*context*/, const ::StopInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopTransfer(::grpc::ServerContext* context, ::StopInfo* request, ::grpc::ServerAsyncResponseWriter< ::VoidType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::LookupName* request, ::grpc::ServerAsyncResponseWriter< ::VoidType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckDuplexConnection<WithAsyncMethod_WaitingForDuplex<WithAsyncMethod_GetRemoteMachineInfo<WithAsyncMethod_GetRemoteMachineAvatar<WithAsyncMethod_ProcessTransferOpRequest<WithAsyncMethod_PauseTransferOp<WithAsyncMethod_StartTransfer<WithAsyncMethod_CancelTransferOpRequest<WithAsyncMethod_StopTransfer<WithAsyncMethod_Ping<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckDuplexConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckDuplexConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::LookupName, ::HaveDuplex>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::LookupName* request, ::HaveDuplex* response) { return this->CheckDuplexConnection(context, request, response); }));}
    void SetMessageAllocatorFor_CheckDuplexConnection(
        ::grpc::experimental::MessageAllocator< ::LookupName, ::HaveDuplex>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LookupName, ::HaveDuplex>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckDuplexConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckDuplexConnection(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckDuplexConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckDuplexConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WaitingForDuplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_WaitingForDuplex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::LookupName, ::HaveDuplex>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::LookupName* request, ::HaveDuplex* response) { return this->WaitingForDuplex(context, request, response); }));}
    void SetMessageAllocatorFor_WaitingForDuplex(
        ::grpc::experimental::MessageAllocator< ::LookupName, ::HaveDuplex>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LookupName, ::HaveDuplex>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_WaitingForDuplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitingForDuplex(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WaitingForDuplex(
      ::grpc::CallbackServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WaitingForDuplex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRemoteMachineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRemoteMachineInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::LookupName, ::RemoteMachineInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::LookupName* request, ::RemoteMachineInfo* response) { return this->GetRemoteMachineInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetRemoteMachineInfo(
        ::grpc::experimental::MessageAllocator< ::LookupName, ::RemoteMachineInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LookupName, ::RemoteMachineInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRemoteMachineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteMachineInfo(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::RemoteMachineInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRemoteMachineInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::LookupName* /*request*/, ::RemoteMachineInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRemoteMachineInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::LookupName* /*request*/, ::RemoteMachineInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRemoteMachineAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRemoteMachineAvatar() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::LookupName, ::RemoteMachineAvatar>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::LookupName* request) { return this->GetRemoteMachineAvatar(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetRemoteMachineAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteMachineAvatar(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::grpc::ServerWriter< ::RemoteMachineAvatar>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::RemoteMachineAvatar>* GetRemoteMachineAvatar(
      ::grpc::CallbackServerContext* /*context*/, const ::LookupName* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::RemoteMachineAvatar>* GetRemoteMachineAvatar(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::LookupName* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ProcessTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ProcessTransferOpRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::TransferOpRequest, ::VoidType>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TransferOpRequest* request, ::VoidType* response) { return this->ProcessTransferOpRequest(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessTransferOpRequest(
        ::grpc::experimental::MessageAllocator< ::TransferOpRequest, ::VoidType>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TransferOpRequest, ::VoidType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ProcessTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessTransferOpRequest(::grpc::ServerContext* /*context*/, const ::TransferOpRequest* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProcessTransferOpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::TransferOpRequest* /*request*/, ::VoidType* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProcessTransferOpRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TransferOpRequest* /*request*/, ::VoidType* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PauseTransferOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PauseTransferOp() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::OpInfo, ::VoidType>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::OpInfo* request, ::VoidType* response) { return this->PauseTransferOp(context, request, response); }));}
    void SetMessageAllocatorFor_PauseTransferOp(
        ::grpc::experimental::MessageAllocator< ::OpInfo, ::VoidType>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::OpInfo, ::VoidType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PauseTransferOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseTransferOp(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PauseTransferOp(
      ::grpc::CallbackServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PauseTransferOp(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartTransfer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::OpInfo, ::FileChunk>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::OpInfo* request) { return this->StartTransfer(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_StartTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTransfer(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::grpc::ServerWriter< ::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::FileChunk>* StartTransfer(
      ::grpc::CallbackServerContext* /*context*/, const ::OpInfo* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::FileChunk>* StartTransfer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::OpInfo* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CancelTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CancelTransferOpRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::OpInfo, ::VoidType>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::OpInfo* request, ::VoidType* response) { return this->CancelTransferOpRequest(context, request, response); }));}
    void SetMessageAllocatorFor_CancelTransferOpRequest(
        ::grpc::experimental::MessageAllocator< ::OpInfo, ::VoidType>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::OpInfo, ::VoidType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CancelTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelTransferOpRequest(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CancelTransferOpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CancelTransferOpRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopTransfer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::StopInfo, ::VoidType>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::StopInfo* request, ::VoidType* response) { return this->StopTransfer(context, request, response); }));}
    void SetMessageAllocatorFor_StopTransfer(
        ::grpc::experimental::MessageAllocator< ::StopInfo, ::VoidType>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StopInfo, ::VoidType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTransfer(::grpc::ServerContext* /*context*/, const ::StopInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopTransfer(
      ::grpc::CallbackServerContext* /*context*/, const ::StopInfo* /*request*/, ::VoidType* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopTransfer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::StopInfo* /*request*/, ::VoidType* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Ping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::LookupName, ::VoidType>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::LookupName* request, ::VoidType* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::experimental::MessageAllocator< ::LookupName, ::VoidType>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LookupName, ::VoidType>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::LookupName* /*request*/, ::VoidType* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Ping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::LookupName* /*request*/, ::VoidType* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CheckDuplexConnection<ExperimentalWithCallbackMethod_WaitingForDuplex<ExperimentalWithCallbackMethod_GetRemoteMachineInfo<ExperimentalWithCallbackMethod_GetRemoteMachineAvatar<ExperimentalWithCallbackMethod_ProcessTransferOpRequest<ExperimentalWithCallbackMethod_PauseTransferOp<ExperimentalWithCallbackMethod_StartTransfer<ExperimentalWithCallbackMethod_CancelTransferOpRequest<ExperimentalWithCallbackMethod_StopTransfer<ExperimentalWithCallbackMethod_Ping<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CheckDuplexConnection<ExperimentalWithCallbackMethod_WaitingForDuplex<ExperimentalWithCallbackMethod_GetRemoteMachineInfo<ExperimentalWithCallbackMethod_GetRemoteMachineAvatar<ExperimentalWithCallbackMethod_ProcessTransferOpRequest<ExperimentalWithCallbackMethod_PauseTransferOp<ExperimentalWithCallbackMethod_StartTransfer<ExperimentalWithCallbackMethod_CancelTransferOpRequest<ExperimentalWithCallbackMethod_StopTransfer<ExperimentalWithCallbackMethod_Ping<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CheckDuplexConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckDuplexConnection() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CheckDuplexConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckDuplexConnection(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WaitingForDuplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WaitingForDuplex() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WaitingForDuplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitingForDuplex(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRemoteMachineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRemoteMachineInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetRemoteMachineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteMachineInfo(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::RemoteMachineInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRemoteMachineAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRemoteMachineAvatar() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetRemoteMachineAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteMachineAvatar(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::grpc::ServerWriter< ::RemoteMachineAvatar>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProcessTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessTransferOpRequest() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ProcessTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessTransferOpRequest(::grpc::ServerContext* /*context*/, const ::TransferOpRequest* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PauseTransferOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PauseTransferOp() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PauseTransferOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseTransferOp(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartTransfer() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_StartTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTransfer(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::grpc::ServerWriter< ::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelTransferOpRequest() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CancelTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelTransferOpRequest(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopTransfer() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_StopTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTransfer(::grpc::ServerContext* /*context*/, const ::StopInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckDuplexConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckDuplexConnection() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CheckDuplexConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckDuplexConnection(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckDuplexConnection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WaitingForDuplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WaitingForDuplex() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_WaitingForDuplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitingForDuplex(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWaitingForDuplex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRemoteMachineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRemoteMachineInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetRemoteMachineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteMachineInfo(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::RemoteMachineInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteMachineInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRemoteMachineAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRemoteMachineAvatar() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetRemoteMachineAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteMachineAvatar(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::grpc::ServerWriter< ::RemoteMachineAvatar>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRemoteMachineAvatar(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessTransferOpRequest() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ProcessTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessTransferOpRequest(::grpc::ServerContext* /*context*/, const ::TransferOpRequest* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessTransferOpRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PauseTransferOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PauseTransferOp() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PauseTransferOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseTransferOp(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseTransferOp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartTransfer() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_StartTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTransfer(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::grpc::ServerWriter< ::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartTransfer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelTransferOpRequest() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CancelTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelTransferOpRequest(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelTransferOpRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopTransfer() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_StopTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTransfer(::grpc::ServerContext* /*context*/, const ::StopInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopTransfer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckDuplexConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckDuplexConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckDuplexConnection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckDuplexConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckDuplexConnection(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckDuplexConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckDuplexConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WaitingForDuplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_WaitingForDuplex() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WaitingForDuplex(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_WaitingForDuplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitingForDuplex(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WaitingForDuplex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WaitingForDuplex(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRemoteMachineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRemoteMachineInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRemoteMachineInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRemoteMachineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteMachineInfo(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::RemoteMachineInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRemoteMachineInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRemoteMachineInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRemoteMachineAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRemoteMachineAvatar() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetRemoteMachineAvatar(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRemoteMachineAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRemoteMachineAvatar(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::grpc::ServerWriter< ::RemoteMachineAvatar>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRemoteMachineAvatar(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetRemoteMachineAvatar(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ProcessTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ProcessTransferOpRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessTransferOpRequest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ProcessTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessTransferOpRequest(::grpc::ServerContext* /*context*/, const ::TransferOpRequest* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProcessTransferOpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProcessTransferOpRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PauseTransferOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PauseTransferOp() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PauseTransferOp(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PauseTransferOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseTransferOp(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PauseTransferOp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PauseTransferOp(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartTransfer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->StartTransfer(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTransfer(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::grpc::ServerWriter< ::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StartTransfer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* StartTransfer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CancelTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CancelTransferOpRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelTransferOpRequest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CancelTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelTransferOpRequest(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CancelTransferOpRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CancelTransferOpRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopTransfer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopTransfer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTransfer(::grpc::ServerContext* /*context*/, const ::StopInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopTransfer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopTransfer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Ping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Ping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckDuplexConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckDuplexConnection() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LookupName, ::HaveDuplex>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LookupName, ::HaveDuplex>* streamer) {
                       return this->StreamedCheckDuplexConnection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckDuplexConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckDuplexConnection(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckDuplexConnection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LookupName,::HaveDuplex>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WaitingForDuplex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WaitingForDuplex() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LookupName, ::HaveDuplex>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LookupName, ::HaveDuplex>* streamer) {
                       return this->StreamedWaitingForDuplex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WaitingForDuplex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WaitingForDuplex(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::HaveDuplex* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWaitingForDuplex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LookupName,::HaveDuplex>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRemoteMachineInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRemoteMachineInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LookupName, ::RemoteMachineInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LookupName, ::RemoteMachineInfo>* streamer) {
                       return this->StreamedGetRemoteMachineInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRemoteMachineInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRemoteMachineInfo(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::RemoteMachineInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRemoteMachineInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LookupName,::RemoteMachineInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessTransferOpRequest() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TransferOpRequest, ::VoidType>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TransferOpRequest, ::VoidType>* streamer) {
                       return this->StreamedProcessTransferOpRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessTransferOpRequest(::grpc::ServerContext* /*context*/, const ::TransferOpRequest* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessTransferOpRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TransferOpRequest,::VoidType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PauseTransferOp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PauseTransferOp() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::OpInfo, ::VoidType>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::OpInfo, ::VoidType>* streamer) {
                       return this->StreamedPauseTransferOp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PauseTransferOp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PauseTransferOp(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPauseTransferOp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OpInfo,::VoidType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelTransferOpRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelTransferOpRequest() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::OpInfo, ::VoidType>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::OpInfo, ::VoidType>* streamer) {
                       return this->StreamedCancelTransferOpRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelTransferOpRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelTransferOpRequest(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelTransferOpRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OpInfo,::VoidType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopTransfer() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StopInfo, ::VoidType>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StopInfo, ::VoidType>* streamer) {
                       return this->StreamedStopTransfer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopTransfer(::grpc::ServerContext* /*context*/, const ::StopInfo* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopTransfer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StopInfo,::VoidType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LookupName, ::VoidType>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LookupName, ::VoidType>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::VoidType* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LookupName,::VoidType>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckDuplexConnection<WithStreamedUnaryMethod_WaitingForDuplex<WithStreamedUnaryMethod_GetRemoteMachineInfo<WithStreamedUnaryMethod_ProcessTransferOpRequest<WithStreamedUnaryMethod_PauseTransferOp<WithStreamedUnaryMethod_CancelTransferOpRequest<WithStreamedUnaryMethod_StopTransfer<WithStreamedUnaryMethod_Ping<Service > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRemoteMachineAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRemoteMachineAvatar() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::LookupName, ::RemoteMachineAvatar>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::LookupName, ::RemoteMachineAvatar>* streamer) {
                       return this->StreamedGetRemoteMachineAvatar(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRemoteMachineAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRemoteMachineAvatar(::grpc::ServerContext* /*context*/, const ::LookupName* /*request*/, ::grpc::ServerWriter< ::RemoteMachineAvatar>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRemoteMachineAvatar(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::LookupName,::RemoteMachineAvatar>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StartTransfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StartTransfer() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::OpInfo, ::FileChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::OpInfo, ::FileChunk>* streamer) {
                       return this->StreamedStartTransfer(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StartTransfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartTransfer(::grpc::ServerContext* /*context*/, const ::OpInfo* /*request*/, ::grpc::ServerWriter< ::FileChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStartTransfer(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::OpInfo,::FileChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetRemoteMachineAvatar<WithSplitStreamingMethod_StartTransfer<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CheckDuplexConnection<WithStreamedUnaryMethod_WaitingForDuplex<WithStreamedUnaryMethod_GetRemoteMachineInfo<WithSplitStreamingMethod_GetRemoteMachineAvatar<WithStreamedUnaryMethod_ProcessTransferOpRequest<WithStreamedUnaryMethod_PauseTransferOp<WithSplitStreamingMethod_StartTransfer<WithStreamedUnaryMethod_CancelTransferOpRequest<WithStreamedUnaryMethod_StopTransfer<WithStreamedUnaryMethod_Ping<Service > > > > > > > > > > StreamedService;
};

class WarpRegistration final {
 public:
  static constexpr char const* service_full_name() {
    return "WarpRegistration";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestCertificate(::grpc::ClientContext* context, const ::RegRequest& request, ::RegResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegResponse>> AsyncRequestCertificate(::grpc::ClientContext* context, const ::RegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegResponse>>(AsyncRequestCertificateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegResponse>> PrepareAsyncRequestCertificate(::grpc::ClientContext* context, const ::RegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RegResponse>>(PrepareAsyncRequestCertificateRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RequestCertificate(::grpc::ClientContext* context, const ::RegRequest* request, ::RegResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestCertificate(::grpc::ClientContext* context, const ::RegRequest* request, ::RegResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RequestCertificate(::grpc::ClientContext* context, const ::RegRequest* request, ::RegResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegResponse>* AsyncRequestCertificateRaw(::grpc::ClientContext* context, const ::RegRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RegResponse>* PrepareAsyncRequestCertificateRaw(::grpc::ClientContext* context, const ::RegRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RequestCertificate(::grpc::ClientContext* context, const ::RegRequest& request, ::RegResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegResponse>> AsyncRequestCertificate(::grpc::ClientContext* context, const ::RegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegResponse>>(AsyncRequestCertificateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegResponse>> PrepareAsyncRequestCertificate(::grpc::ClientContext* context, const ::RegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RegResponse>>(PrepareAsyncRequestCertificateRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RequestCertificate(::grpc::ClientContext* context, const ::RegRequest* request, ::RegResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestCertificate(::grpc::ClientContext* context, const ::RegRequest* request, ::RegResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RequestCertificate(::grpc::ClientContext* context, const ::RegRequest* request, ::RegResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::RegResponse>* AsyncRequestCertificateRaw(::grpc::ClientContext* context, const ::RegRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RegResponse>* PrepareAsyncRequestCertificateRaw(::grpc::ClientContext* context, const ::RegRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestCertificate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestCertificate(::grpc::ServerContext* context, const ::RegRequest* request, ::RegResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestCertificate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestCertificate(::grpc::ServerContext* /*context*/, const ::RegRequest* /*request*/, ::RegResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestCertificate(::grpc::ServerContext* context, ::RegRequest* request, ::grpc::ServerAsyncResponseWriter< ::RegResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestCertificate<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RequestCertificate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::RegRequest, ::RegResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::RegRequest* request, ::RegResponse* response) { return this->RequestCertificate(context, request, response); }));}
    void SetMessageAllocatorFor_RequestCertificate(
        ::grpc::experimental::MessageAllocator< ::RegRequest, ::RegResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RegRequest, ::RegResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestCertificate(::grpc::ServerContext* /*context*/, const ::RegRequest* /*request*/, ::RegResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestCertificate(
      ::grpc::CallbackServerContext* /*context*/, const ::RegRequest* /*request*/, ::RegResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestCertificate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::RegRequest* /*request*/, ::RegResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RequestCertificate<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RequestCertificate<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestCertificate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestCertificate(::grpc::ServerContext* /*context*/, const ::RegRequest* /*request*/, ::RegResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestCertificate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestCertificate(::grpc::ServerContext* /*context*/, const ::RegRequest* /*request*/, ::RegResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestCertificate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestCertificate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestCertificate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestCertificate(::grpc::ServerContext* /*context*/, const ::RegRequest* /*request*/, ::RegResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestCertificate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestCertificate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestCertificate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RegRequest, ::RegResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RegRequest, ::RegResponse>* streamer) {
                       return this->StreamedRequestCertificate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestCertificate(::grpc::ServerContext* /*context*/, const ::RegRequest* /*request*/, ::RegResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestCertificate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RegRequest,::RegResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestCertificate<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestCertificate<Service > StreamedService;
};


#endif  // GRPC_warp_2eproto__INCLUDED
